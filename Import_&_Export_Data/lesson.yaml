- Class: meta
  Course: Spatial Data in R
  Lesson: Import & Export Data
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.3

- Class: text
  Output: Welcome to the third lesson in this course! This time we will learn how to import spatial data into R and how to export it once we are done with our analysis. 

- Class: text
  Output: In the first two lesson you learned, that geospatial data mainly comes in two forms - rasters and vectors. They store spatial information differently from each other. Let's start with raster data sets!

- Class: text
  Output: Before you can import, load or read in any data, you should know where it is located at. Typically, you set your working directory to the folder containing the data, using the 'setwd()'-command (wd = working directory). This saves you time and space when specifying file paths later. 

- Class: cmd_question
  Output: In preparation of this lesson the working directory was set for you. Find out where it is by using the 'getwd()'-function. 
  CorrectAnswer: getwd()
  AnswerTests: omnitest(correctExpr='getwd()')
  Hint: Use getwd() to find out where R sees your 'home-folder'.

- Class: text
  Output: What does the path tell you? It's pretty long and the folder seems to be hidden somewhere deep down on your drive. This is actually the location where all files for this are stored. 
  
- Class: cmd_question
  Output: We will now list all the files stored in this directory. Because we set a working directory already, there is no need specify a path. Try 'list.files()'. 
  CorrectAnswer: list.files()
  AnswerTests: omnitest(correctExpr='list.files()')
  Hint: Use list.files() to print all files in your current working directory.

- Class: mult_question
  Output:  We can see a variety of files in different formats. Which of the following file extensions commonly marks a raster file?
  AnswerChoices: .R; .yaml; .grd; .txt
  CorrectAnswer: .grd
  AnswerTests: omnitest(correctVal= '.grd')
  Hint: .R-, .yaml- and .txt files usually do not store spatial information. .grd stands for Gridded Data and can be used to store raster data.

- Class: cmd_question
  Output: Imagine your working directory is full of data files with many different extensions. But you are only interested in one specific file type. Repeat the 'list.files()'-command from before, this time setting the 'pattern'-argument to ".grd$". This will filter your results.
  CorrectAnswer: list.files(pattern=".grd$")
  AnswerTests: omnitest(correctExpr='list.files(pattern=".grd$")')
  Hint: We use list.files(pattern=".grd$") to filter the list of files. The $-sign makes sure, that there is no character after '.grd'. This avoids listing e.g. auxilary files like some_raster.grd.aux.xml.
  
- Class: cmd_question
  Output: In R there are two standard packages for handeling raster data. The first one is simply called 'raster'. Load it with the 'library()'-command so we can use its commands later.
  CorrectAnswer: library(raster)
  AnswerTests: omnitest(correctExpr='library(raster)')
  Hint: Type library(raster) .

- Class: cmd_question
  Output: The 'raster'-package has a 'raster()'-function which creates RasterLayer objects. There are many data types (or signatures) that can be used as inputs. Type '?raster' to call the help page and explore what inputs are eligible.
  CorrectAnswer: ?raster
  AnswerTests: omnitest(correctExpr='?raster')
  Hint: Putting a ? in front of any command will refer you to the R help page. Do not use () though.

- Class: cmd_question
  Output: We will go with the method for signature character, as we know name and location of our file. Create a new variable 'r1' in which you store 'raster("mount_rainier.grd")'. This imports the raster file we discovered earlier.
  CorrectAnswer: r1 <- raster("mount_rainier.grd")
  AnswerTests: omnitest(correctExpr='r1 <- raster("mount_rainier.grd")')
  Hint: Use the 'raster'-function to read in the .grd file we listed a few steps before. There is no need to paste the whole path, because R automatically looks in our working directory. Create a new variable like this - r1 <- raster(...)

- Class: cmd_question
  Output: The other common package is called 'rgdal'. 'GDAL' stands for Geospatial Data Abstraction Library. Load the 'rgdal'-package with 'library()'.
  CorrectAnswer: library(rgdal)
  AnswerTests: omnitest(correctExpr='library(rgdal)')
  Hint: Type library(rgdal) .

- Class: cmd_question
  Output: We can also load a raster with the 'readGDAL()'-command. Try it by creating a new variable called 'r2' from the same data set as before. As a second option, instead of typing the file name ("mount_rainier.grd") you could also try using the 'list.files()'-expression from earlier. Because this returns a list, specify that you only want to use the first item - 'list.files(pattern=".grd$")[[1]]'
  CorrectAnswer: r2 <- readGDAL(list.files(pattern=".grd$")[[1]])
  AnswerTests: any_of_exprs('r2 <- readGDAL("mount_rainier.grd")', 'r2 <- readGDAL(list.files(pattern=".grd$")[[1]])')
  Hint: For the simple solution put "mount_rainier.grd" inside 'readGDAL()'. The advanced option is useful if you think about reusing this line. In a loop for example, where you read in many data sets, all that needs to change is the index number in [[brackets]]. In this case we list all .grd-files and take the first one to create our raster.

- Class: cmd_question
  Output: First, we want to inspect 'r1', which we created with the 'raster()'-function. Plot it quickly! If you can not see the plot instantly, press Ctrl+6.
  CorrectAnswer: plot(r1)
  AnswerTests: omnitest(correctExpr='plot(r1)')
  Hint: Just type plot(r1).
  
- Class: cmd_question
  Output: Now use 'str()' to explore the structure of 'r1'.
  CorrectAnswer: str(r1)
  AnswerTests: omnitest(correctExpr='str(r1)')
  Hint: By executing str(r1) you will get an idea of the internal data structure of an object.

- Class: text
  Output: The first line states, that this object belongs to the class 'RasterLayer', which is part of [package "raster"]. Below you see some meta data, grouped into different categories.
  
- Class: text
  Output: These categories are called slots and help structuring information in R objects. You can imagine them as drawers in a cabinet. They can be accessed by typing an '@' behind an object, just like using the '$'-sign with data frames. Each slot can again have sub-slots, like little compartments in a drawer. For example, to access the maximum value of the raster, one could use 'r1@data@max'.
  
- Class: cmd_question
  Output: Repeat the last two steps for the 'r2'-variable. First plot it...
  CorrectAnswer: plot(r2)
  AnswerTests: omnitest(correctExpr='plot(r2)')
  Hint: Just type plot(r2).
  
- Class: cmd_question
  Output: ...then explore its structure and view the slots it contains.
  CorrectAnswer: str(r2)
  AnswerTests: omnitest(correctExpr='str(r2)')
  Hint: Like before, use str(r2) to get a structural overview of your object.
  
- Class: text
  Output: Take a moment to explore the changes in the plot window, as well as in the console. How does the structure of 'r1' and 'r2' compare?
  
- Class: text
  Output: Although 'r2' comes from a .grd-raster-file, it is not considered a 'RasterLayer' in R but belongs to the class 'SpatialGridDataFrame' from [package "sp"]. The structure of both objects differs, e.g. in slot numbers - 12 slots in 'r1' vs. 4 in 'r2'.

- Class: text
  Output: Different classes also have different methods for the standard 'plot()'-function. As you can see in your plot window, the second plot has different colors, a larger legend and no axes lables. 

- Class: text
  Output: Which class to use depends on your task and preference. We will now manipulate our raster stored in 'r1' with a simple calculation. This is just a symbol for the analysis you would conduct before exporting your result. 
  
- Class: cmd_question
  Output: Convert elevation data from Mount Rainier from meters (current unit) to feet. 1 meter = 3.28084 feet. Create a new variable 'r1.feet' by multiplying 'r1' with the factor.
  CorrectAnswer: r1.feet <- r1 * 3.28084
  AnswerTests: omnitest(correctExpr='r1.feet <- r1 * 3.28084')
  Hint: Create 'r1.feet' by assigning the product of 'r1' and 3.28084. the multiplication sign is * .

- Class: text
  Output: If you now want to check the structure off 'r1.feet', you probably have many possibilites in mind. Here is a way of exploring without any R-commands - press Ctrl+8 to view your global environment and scroll to the 'r1.feet' drowp-down menu. See the min and max values in the @data slot?

- Class: text
  Output: We will now export our product to the working directory. Even though it was a .grd file when we imported it, we will now change its format and write it as a GeoTIFF (.tif).
  
- Class: cmd_question
  Output: Use the 'writeRaster()'-function for the export. The first argument should be 'r1.feet'. The second one specifies the path and/or filename. In quotes, give your output a precise name and DO NOT FORGET the file extension (e.g. "mount_rainier_feet.tif"). As a third argument, add 'overwrite = TRUE', so old versions with the same name can get replaced by new ones.
  CorrectAnswer: writeRaster(r1.feet, "mount_rainier_feet.tif" , overwrite=TRUE)
  AnswerTests: omnitest(correctExpr='writeRaster(r1.feet, "mount_rainier_feet.tif" , overwrite=TRUE)')
  Hint: Writing a raster with 'writeRaster()' only requires two things - the R raster object and the filename of the export. But we will add a third argument, to avoid an error, in case the file already exists. This is useful, when you are experimenting with your analysis. For this excercise try 'writeRaster(r1.feet, "mount_rainier_feet.tif", overwrite=TRUE)'

- Class: text
  Output: You sucessfully imported and exported a raster data set! If you want to check if the file really made it to your directory, navigate to the folder in your explorer. There is a second option, to view this folder in RStudio directly. Press Ctrl + 5 and under "More", select "Go To Working Directory".
  
- Class: text
  Output: In the second part of this lesson we will focus on importing and exporting vector data. Like rasters, vectors can be imported from a file directly.
  
- Class: cmd_question
  Output: Use the 'readOGR()'-command to import the file 'nightclubs_zurich.shp'. Store this data in a new variable called 'n1'. Background fact - OGR stands for 'OpenGIS Simple Features Reference Implementation' and generally describes vector data in the open source GIS world.
  CorrectAnswer: n1 <- readOGR("nightclubs_zurich.shp")
  AnswerTests: omnitest(correctExpr='n1 <- readOGR("nightclubs_zurich.shp")')
  Hint: You can read in a shapefile like you did earlier with the raster. This time use 'readOGR()', not 'readGDAL()'. Create a new variable like this - n1 <- readOGR(...)
  
- Class: cmd_question
  Output: View 'str()' of 'n1' and make yourself familiar with its structure.
  CorrectAnswer: str(n1)
  AnswerTests: omnitest(correctExpr='str(n1)')
  Hint: Use str(n1) to get information on the structure of an object.
  
- Class: mult_question
  Output: Which class does 'n1' belong to?
  AnswerChoices: SpatialPointsDataFrame;SpatialPoints;SpatialMultiPoints;Shapefile
  CorrectAnswer: SpatialPointsDataFrame
  AnswerTests: omnitest(correctVal= 'SpatialPointsDataFrame')
  Hint: In R, the file is not a shapefile anymore, but spatial points which are stored in a data frame.

- Class: mult_question
  Output: How many point features are stored in this object?
  AnswerChoices: 34;5;104353615;2
  CorrectAnswer: 34
  AnswerTests: omnitest(correctVal= '34')
  Hint: There is no line explicitly stating "There are X features". But for each point there is one row in the data frame - also called observation (obs.).

- Class: cmd_question
  Output: Great, seems like you got the concept of spatial objects in R! So far we used 'plot()' to display our data. We will now try a different, interactive display, by using the 'mapview()'-command from the package of the same name. The package is loaded for you in the background, so you can go ahead and try 'mapview(n1)'. The map will be displayed in the RStudio Viewer, not in Plots.
  CorrectAnswer: mapview(n1)
  AnswerTests: omnitest(correctExpr='mapview(n1)')
  Hint: The 'mapview()'-function only needs the spatial object as an argument.
  
- Class: text
  Output: Take a few moments to explore the map. Check out the pop-up windows of some points. On the left you can select different basemap layers.

- Class: cmd_question
  Output: Now reading in this (ESRI-) shapefile was pretty easy. Let us now do it the slightly harder way, reading in the same data, but from a .csv file. CSV stands for 'Comma Seperated Values' and is often used to store data tables. Create a new variable 'n2' and assign to it the result of'read.csv("nightclubs_zurich.csv")'.
  CorrectAnswer: n2 <- read.csv("nightclubs_zurich.csv")
  AnswerTests: omnitest(correctExpr='n2 <- read.csv("nightclubs_zurich.csv")')
  Hint: To rad in the .csv, use n2 <- read.csv("nightclubs_zurich.csv"). Again, there is need to specify a path, because the table is stored in our working directory.
  
- Class: cmd_question
  Output: Chek out the first few rows of 'n2' using the 'head()'-function.
  CorrectAnswer: head(n2)
  AnswerTests: omnitest(correctExpr='head(n2)')
  Hint: Type head(n2).
  
- Class: text
  Output: The header tells us there are 5 columns in this table. The first three store an ID or text information describing each point. The other two store point coordinates in terms of latitude and longitude in degrees.

- Class: text
  Output: You can now turn your ordinary table into a spatial object with 'SpatialPointsDataFrame()'. The function needs (at least) two arguments - 1. coordinates in a 2-column data frame and 2. additional information for each feature.

- Class: cmd_question
  Output: Create the new variable 'n3' with the command from above. You can specify the coordinates with either 'n2[,4:5]' or 'data.frame(n2$x, n2$y)'. As additional information just keep all of 'n2'.
  CorrectAnswer: n3 <- SpatialPointsDataFrame(n2[,4:5], n2)
  AnswerTests: any_of_exprs('n3 <- SpatialPointsDataFrame(n2[,4:5], n2)', 'n3 <- SpatialPointsDataFrame(data.frame(n2$x, n2$y), n2)')
  Hint: You can use both options to achieve the same result - 'n3 <- SpatialPointsDataFrame(n2[,4:5], n2)' or 'n3 <- SpatialPointsDataFrame(data.frame(n2$x, n2$y), n2)'

- Class: cmd_question
  Output: Exectue 'n3' to see how your new object looks like. Can you spot a difference to 'n1', which you imported from the shapefile? If you need a second look, type 'play()', then 'n1' and finally 'nxt()' when you are done.
  CorrectAnswer: n3
  AnswerTests: omnitest(correctExpr='n3')
  Hint: To get a quick look at some meta data of an object, just execute it in the console. No need for a specific command!
  
- Class: text
  Output: Our 'n3'-object misses a spatial coordinate reference system (CRS). Why is this important? With no CRS defined, R or any GIS does not know where to locate the point coordinates. They need a spatial reference.
  
- Class: text
  Output: The advantage of spatial data file types (like .shp or .tif) is, that they store such information. In this case we have to specify the CRS by hand. The 'crs()'-command can query AND set a CRS. Do not confuse it with the 'CRS()'-command from the 'sp'-package, written in upper-case letters. 

- Class: cmd_question
  Output: As discussed earlier, our point coordinates are in degree latitude and longitude. Set the CRS of 'n3' to the World Geodetic System (aka WGS84) with the following line -  crs(n3) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
  CorrectAnswer: crs(n3) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
  AnswerTests: omnitest(correctExpr='crs(n3) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"')
  Hint: Copy, paste and execute the line above. The complicated expression right of the arrow should be in quotes.

- Class: text
  Output: In case this last step was not entirely clear to you - don't worry! All you need to know regarding CRS will be covered in another lesson.

- Class: cmd_question
  Output: Now your SpatialPointsDataFrame is spatially referenced and can be plotted. Use 'mapview()' again to plot 'n3'.
  CorrectAnswer: mapview(n3)
  AnswerTests: omnitest(correctExpr='mapview(n3)')
  Hint: Like earlier, you can use mapview(n3) to view an interactive map with your point features.

- Class: text
  Output: After exploring your result in the map you will find no difference to the data set from before. They are identical, although they originated from two different file types (.shp and .csv).

- Class: text
  Output:  Finally, we want to export 'n3' to a shapefile, e.g. in order to use it in some GIS software. This can be realized with the 'writeOGR()'-function. We will need to specify 4 arguements - 1. 'obj' (the object to export), 2. 'dsn' (destination = target directory), 3. 'layer' (name of the file to be created WITHOUT extension), 4. 'driver' (target file type - sets the file extension).
  
- Class: cmd_question
  Output: Apply the 'writeOGR'-function with the following arguments - obj=n3, dsn=getwd(), layer="nightclub_locations", driver="ESRI Shapefile"
  CorrectAnswer: writeOGR(obj=n3, dsn=getwd(), layer="nightclub_locations", driver="ESRI Shapefile")
  AnswerTests: omnitest(correctExpr='writeOGR(obj=n3, dsn=getwd(), layer="nightclub_locations", driver="ESRI Shapefile")')
  Hint: Its okay if you did not make on the first try. Paste this - writeOGR(obj=n3, dsn=getwd(), layer="nightclub_locations", driver="ESRI Shapefile") - and try to comprehend what it does.

- Class: text
  Output: Congratulations! Now your not only imported and exported rasters, but also vector data. Additionally you learned about the structure of spatial objects in R. Keep upt the good work!
