- Class: meta
  Course: Spatial_Data_in_R
  Lesson: Raster_Basics
  Author: Johannes Heisig
  Type: Standard
  Organization: UN-SPIDER / University of Bayreuth
  Version: 2.4.3

- Class: text
  Output: Welcome to this SWIRL course on Spatial Data in R.

- Class: text
  Output: In the following lessons you will learn how to import, process and analyze spatial data within the R programming language.

- Class: mult_question
  Output: As you might know, spatial data usually comes as raster or vector data. Which of the two formats uses pixel cells to display information?
  AnswerChoices: raster;vector;both
  CorrectAnswer: raster
  AnswerTests: omnitest(correctVal='raster')
  Hint: Pixel cells are also called raster cells!

- Class: text
  Output: Correct! In this lesson we will focus on raster data exclusively. R is able to read in a variety of raster data file formats. Regardless of the original format, R creates an internal 'raster-object' from it. This allows for compatibility of different inputs.

- Class: cmd_question
  Output: We loaded a raster data set in the background for you to explore. It contains elevation data from around Mount Rainier (units are meters). Type 'plot(mt_rainier)' to see what it looks like.
  CorrectAnswer: plot(mt_rainier)
  AnswerTests: omnitest(correctExpr='plot(mt_rainier)')
  Hint: Just type 'plot(mt_rainier)' and hit ENTER.

- Class: text
  Output: The plot already gives us an idea about location and extent of our data set. It also suggests, that values range from below 1000m to above 4000m, which seems reasonable for mountainous regions.

- Class: cmd_question
  Output: Let's view some basic meta data that R stores together with the raster values. Just type the name of the raster and hit ENTER. Getting this kind of overview before starting to work with the data set is good practice. 
  CorrectAnswer: mt_rainier
  AnswerTests: omnitest(correctExpr='mt_rainier')
  Hint: Execute 'mt_rainier'.

- Class: text
  Output: Pretty handy, right? We got all the important information in one place. Sometimes though, we would like to access single items from this meta data list, for example to print the resolution in a plot description or to use the extent information to manipulate your data.

- Class: text
  Output: We will now extract these bits of information individually. The 'cellStats()'-function is great for getting basic statistics on the entire data set. First we are interested in the value range (minimum and maximum) of our elevation data.

- Class: cmd_question
  Output: Type 'cellStats(mt_rainier, range)' to see highest and lowest elevation values. 
  CorrectAnswer: cellStats(mt_rainier, range)
  AnswerTests: omnitest(correctExpr='cellStats(mt_rainier, range)')
  Hint: It is important to keep the right order of arguments - cellStats(mt_rainier, range)

- Class: text
  Output: Besides the range you could also query minimum (min), maximum (max), mean (mean), standard deviation (sd) and many more.

- Class: cmd_question
  Output: Next we want to explore the dimensions of our data set. A raster has a number of both rows and columns. The product of the two is the total number of cells. Check how many rows the raster has with 'nrow(mt_rainier)'.
  CorrectAnswer: nrow(mt_rainier)
  AnswerTests: omnitest(correctExpr='nrow(mt_rainier)')
  Hint: Just type 'nrow(mt_rainier)'.

- Class: cmd_question
  Output: Now do the same with the ncol()-function.
  CorrectAnswer: ncol(mt_rainier)
  AnswerTests: omnitest(correctExpr='ncol(mt_rainier)')
  Hint: Use 'ncol(mt_rainier)' to get the number of columns.

- Class: cmd_question
  Output: Finally try the ncell()-function in the same manner. You could also multiply the two numbers by hand or by using the two functions from above --> 'ncell(x) = nrow(x) * ncol(x) = 2159 * 1799'.
  CorrectAnswer: 4079076
  AnswerTests: omnitest(correctVal='4079076', correctExpr='ncell(mt_rainier)')
  Hint: Use 'ncell(mt_rainier)' to get the number of cells.

- Class: cmd_question
  Output: We now know that our data set consists of almost 4 million cells with idividual values. That's quite a lot! This must mean the spatial resolution is pretty high. Get a more specific answer with the 'res()'-function.
  CorrectAnswer: res(mt_rainier)
  AnswerTests: omnitest(correctExpr='res(mt_rainier)')
  Hint: Use 'res(mt_rainier)' to get the length of one raster cell.

- Class: text
  Output: The map units of this data set are meters. Because the raster was projected from geographic to UTM coordinates, cells are not perfectly square. We will cover more details in a later lesson on Coordinate Reference Systems.

- Class: text
  Output: The two axes of our plot on the right give as a hint on the position of the data set within UTM zone 10 North, which is located somewhere in western North America.

- Class: cmd_question
  Output: However, let's find out about the exact spatial extent of the raster. Use the 'extent()'-command with the 'mt_rainier' dataset as an argument.
  CorrectAnswer: extent(mt_rainier)
  AnswerTests: omnitest(correctExpr='extent(mt_rainier)')
  Hint: Be careful to spell extent with a 't' in the end, not a 'd'. Type 'extent(mt_rainier)'.

- Class: text
  Output: When comparing min and max values, we can observe that our data set is about 40 km wide in in x- and 67 km wide in y-direction.

- Class: text
  Output: Earlier we realized that our dataset is quite large and we are only interested in Mount Rainier. So let's reduce the data set a little. For this we should specify a smaller extent first.

- Class: cmd_question
  Output: To specify simple geographic extents one needs to define only two diagonally opposite corners of a rectangle. Use the 'click()'-function twice to get the exact coordinates of your desired extent. Type 'click()', hit ENTER and doubleclick on the bottom left corner, e.g. south-west of the mountain.
  CorrectAnswer: click()
  AnswerTests: expr_uses_func('click')
  Hint: The 'click()'-function belongs to the raster-package. It does not need an further agruments, but your raster data set should be plotted in your plot window.
  
- Class: cmd_question
  Output: Now  use 'click()' again and doubleclick the top right corner of your extent.
  CorrectAnswer: click()
  AnswerTests: expr_uses_func('click')
  Hint: Just use 'click()' to specify the top right corner of your rectangle. The function belongs to the raster-package. It does not need an further agruments, but your raster data set should be plotted in your plot window.

- Class: text
  Output: In the console you can now see the output of the two 'click'-commands. The function just provides us with information. We now have to tell R to make an extent-object from that.

- Class: text
  Output: The 'extent'-function is what we need. It takes in four values - Xmin, Xmax, Ymin, Ymax (the order is important!) - and creates an extent object.

- Class: cmd_question
  Output: Use the 'extent'-function and store the result in a variable like this. ex <- extent(Xmin, Xmax, Ymin, Ymax). You can also roughly round your X- and Y-values manually. Make sure to use both X-values first, than both Y-values ("bottom-left-X", "top-right-X", "bottom-left-Y", "top-right-Y").
  CorrectAnswer: ex <- extent(-121.8363, -121.6776, 46.81611, 46.90703)
  AnswerTests: expr_uses_func('extent')
  Hint: Use the 'extent'-function and store the result by pasting the X- and Y-coordinates from the 'click'-commands earlier. ex <- extent( "bottom-left-X", "top-right-X", "bottom-left-Y", "top-right-Y")

- Class: cmd_question
  Output: To reduce the data we can now crop it to our new extent. The 'crop()'-function takes in a raster and an extent-object. Try cropping your dataset in the following manner. mt_rainier_crop <- crop(mt_rainier, 'extent-object') 
  CorrectAnswer: mt_rainier_crop <- crop(mt_rainier, ex)
  AnswerTests: expr_uses_func('crop')
  Hint: Try e.g. mt_rainier_crop <- crop(mt_rainier, ex) if your extent from earlier is called ex.

- Class: cmd_question
  Output: To see the result plot the cropped raster with the plot()-function.
  CorrectAnswer: plot(mt_rainier_crop)
  AnswerTests: omnitest(correctExpr='plot(mt_rainier_crop)')
  Hint: Use plot(mt_rainier_crop) to view the result.

- Class: text
  Output: Did you just realize R plotted your cropped image a little faster than the original one? Reducing data to the necessary extent saves you computation time. This might get more important when your calculations on the raster get more complex.

- Class: text
  Output: We learned earlier, that each raster cell contains an elevation value. R stores these values in a long vector and assigns them to cells from left to right, starting in the top left corner of the image. We could display all these values by using the 'values()'-function. In our case however, this would print hundreds of thousands of numbers and R would politely stop when the 'max.print'-limit is reached.

- Class: text
  Output: To see the first few example values though, we can wrap 'values()' in the 'head()'-function. If you are not familiar with 'head()' - it selects a "header", so the first few items of a vector or table. By default it selects the first 6.

- Class: cmd_question
  Output: Try using 'head()' and place 'values(mt_rainier_crop)' in it as an argument.
  CorrectAnswer: head(values(mt_rainier_crop))
  AnswerTests: omnitest(correctExpr='head(values(mt_rainier_crop))')
  Hint: Wrap 'head()' around the 'values()' like this - 'head(values(mt_rainier_crop))'

- Class: text
  Output: In R we can easily mask parts of the value range of our raster. Let's say we are only interested in areas above 2000 meters. 

- Class: cmd_question
  Output: Before we manipulate the data, assign the cropped image to a new variable called 'mt_rainier_2000'. This is like copying a file for backup reasons. 
  CorrectAnswer: mt_rainier_2000 <- mt_rainier_crop
  AnswerTests: omnitest(correctExpr='mt_rainier_2000 <- mt_rainier_crop')
  Hint: Just reassign the cropped data set like this - mt_rainier_2000 <- mt_rainier_crop

- Class: cmd_question
  Output: Now we will use [square brackets] to index elevations below 2000 meters, like this - 'mt_rainier_2000[mt_rainier_2000 < 2000]'. The expression reads like follows. "Select values of mt_rainier_2000, at locations where values of mt_rainier_2000 are smaller than the threshold 2000." Finally assign NA to the selected values.
  CorrectAnswer: mt_rainier_2000[mt_rainier_2000 < 2000] <- NA
  AnswerTests: omnitest(correctExpr='mt_rainier_2000[mt_rainier_2000 < 2000] <- NA')
  Hint: Select the lower elevations and assign NA's with this line - 'mt_rainier_2000[mt_rainier_2000 < 2000] <- NA'

- Class: cmd_question
  Output: Plot the manipulated raster to see what changed.
  CorrectAnswer: plot(mt_rainier_2000)
  AnswerTests: omnitest(correctExpr='plot(mt_rainier_2000)')
  Hint: Plot the modified raster with 'plot(mt_rainier_2000)'.

- Class: text
  Output: As you can see, the extent of the raster stayed the same. This means no cells were deleted, but they are now occupied with NA-values. By default R displays them in white. That is enough for now. We will cover a few more advanced plotting commands in a later lesson.
